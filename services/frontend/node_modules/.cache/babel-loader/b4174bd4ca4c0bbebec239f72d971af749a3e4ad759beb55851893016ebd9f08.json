{"ast":null,"code":"var _jsxFileName = \"D:\\\\Downloads\\\\internships\\\\SysDesignLEETCODE\\\\services\\\\frontend\\\\src\\\\components\\\\ChatBox.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { api } from '../api';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatBox = ({\n  problemId\n}) => {\n  _s();\n  const [messages, setMessages] = useState([{\n    id: '1',\n    type: 'assistant',\n    content: 'Hi! I\\'m your AI System Design Assistant. Ask me about system design concepts, architecture patterns, or get hints for your current problem. I\\'m here to help you learn!',\n    timestamp: new Date()\n  }]);\n  const [inputValue, setInputValue] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [assistantStatus, setAssistantStatus] = useState(null);\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    // Check assistant status on mount\n    const checkStatus = async () => {\n      try {\n        const status = await api.getAssistantStatus();\n        setAssistantStatus(status);\n        if (!status.llm_available) {\n          const systemMessage = {\n            id: 'status',\n            type: 'system',\n            content: '⚠️ AI assistant is running in fallback mode. OpenAI API key not configured. You\\'ll still get helpful responses, but they won\\'t be as intelligent.',\n            timestamp: new Date()\n          };\n          setMessages(prev => [...prev, systemMessage]);\n        }\n      } catch (error) {\n        console.error('Failed to check assistant status:', error);\n      }\n    };\n    checkStatus();\n  }, []);\n  const getHints = async () => {\n    if (!problemId) {\n      alert('No problem selected for hints');\n      return;\n    }\n    setIsLoading(true);\n    try {\n      const hintsResponse = await api.getDynamicHints(problemId);\n      const hintsMessage = {\n        id: Date.now().toString(),\n        type: 'hints',\n        content: `Here are some hints for this problem:\\n\\n${hintsResponse.hints.map((hint, idx) => `${idx + 1}. ${hint}`).join('\\n')}`,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, hintsMessage]);\n    } catch (error) {\n      console.error('Failed to get hints:', error);\n      const errorMessage = {\n        id: Date.now().toString(),\n        type: 'system',\n        content: 'Sorry, I couldn\\'t get hints right now. Please try again later.',\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  useEffect(scrollToBottom, [messages]);\n  const handleSendMessage = async () => {\n    if (!inputValue.trim() || isLoading) return;\n    const userMessage = {\n      id: Date.now().toString(),\n      type: 'user',\n      content: inputValue,\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    const question = inputValue;\n    setInputValue('');\n    setIsLoading(true);\n    try {\n      const response = await api.askAssistant({\n        question,\n        context_problem_id: problemId\n      });\n      const assistantMessage = {\n        id: (Date.now() + 1).toString(),\n        type: 'assistant',\n        content: response.answer,\n        timestamp: new Date(),\n        relatedConcepts: response.related_concepts,\n        confidence: response.confidence\n      };\n      setMessages(prev => [...prev, assistantMessage]);\n    } catch (error) {\n      console.error('Failed to get assistant response:', error);\n      const errorMessage = {\n        id: (Date.now() + 1).toString(),\n        type: 'system',\n        content: 'Sorry, I encountered an error. Please try again.',\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uD83E\\uDD16 AI Assistant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-status\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: isLoading ? 'thinking' : 'ready',\n          children: isLoading ? 'Thinking...' : assistantStatus !== null && assistantStatus !== void 0 && assistantStatus.llm_available ? '🟢 AI Ready' : '🟡 Fallback Mode'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-actions\",\n      children: [problemId && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"hint-button\",\n        onClick: getHints,\n        disabled: isLoading,\n        children: \"\\uD83D\\uDCA1 Get Hints\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quick-questions\",\n        children: [/*#__PURE__*/_jsxDEV(\"small\", {\n          children: \"Quick questions:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setInputValue('What is load balancing?'),\n          children: \"Load Balancing\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setInputValue('How does caching work?'),\n          children: \"Caching\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setInputValue('What is database sharding?'),\n          children: \"Sharding\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.type}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: message.type === 'hints' ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hints-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"hints-header\",\n              children: \"\\uD83D\\uDCA1 Hints for this problem:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"hints-list\",\n              children: message.content.split('\\n').filter(line => line.trim()).map((line, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"hint-item\",\n                children: line\n              }, idx, false, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: message.content.split('\\n').map((line, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: line\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 21\n            }, this))\n          }, void 0, false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }, this), message.relatedConcepts && message.relatedConcepts.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"related-concepts\",\n          children: /*#__PURE__*/_jsxDEV(\"small\", {\n            children: [\"Related concepts: \", message.relatedConcepts.join(', ')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-footer\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-timestamp\",\n            children: message.timestamp.toLocaleTimeString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 15\n          }, this), message.confidence && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `confidence confidence-${message.confidence}`,\n            children: [message.confidence, \" confidence\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this)]\n      }, message.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message assistant loading\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"typing-indicator\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyPress: handleKeyPress,\n          placeholder: \"Ask about system design concepts, patterns, or get help with your current problem...\",\n          rows: 2,\n          disabled: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          disabled: !inputValue.trim() || isLoading,\n          className: \"send-button\",\n          children: isLoading ? '...' : 'Send'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBox, \"OgfLN+TNt/vJkEQpR5xK8S4t8b0=\");\n_c = ChatBox;\nexport default ChatBox;\nvar _c;\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"names":["React","useState","useEffect","useRef","api","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatBox","problemId","_s","messages","setMessages","id","type","content","timestamp","Date","inputValue","setInputValue","isLoading","setIsLoading","assistantStatus","setAssistantStatus","messagesEndRef","checkStatus","status","getAssistantStatus","llm_available","systemMessage","prev","error","console","getHints","alert","hintsResponse","getDynamicHints","hintsMessage","now","toString","hints","map","hint","idx","join","errorMessage","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","trim","userMessage","question","response","askAssistant","context_problem_id","assistantMessage","answer","relatedConcepts","related_concepts","confidence","handleKeyPress","e","key","shiftKey","preventDefault","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","message","split","filter","line","length","toLocaleTimeString","ref","value","onChange","target","onKeyPress","placeholder","rows","_c","$RefreshReg$"],"sources":["D:/Downloads/internships/SysDesignLEETCODE/services/frontend/src/components/ChatBox.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { api, AssistantResponse } from '../api';\n\ninterface Message {\n  id: string;\n  type: 'user' | 'assistant' | 'system' | 'hints';\n  content: string;\n  timestamp: Date;\n  relatedConcepts?: string[];\n  confidence?: string;\n}\n\ninterface ChatBoxProps {\n  problemId?: string;\n}\n\nconst ChatBox: React.FC<ChatBoxProps> = ({ problemId }) => {\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: '1',\n      type: 'assistant',\n      content: 'Hi! I\\'m your AI System Design Assistant. Ask me about system design concepts, architecture patterns, or get hints for your current problem. I\\'m here to help you learn!',\n      timestamp: new Date()\n    }\n  ]);\n  const [inputValue, setInputValue] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [assistantStatus, setAssistantStatus] = useState<any>(null);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    // Check assistant status on mount\n    const checkStatus = async () => {\n      try {\n        const status = await api.getAssistantStatus();\n        setAssistantStatus(status);\n        \n        if (!status.llm_available) {\n          const systemMessage: Message = {\n            id: 'status',\n            type: 'system',\n            content: '⚠️ AI assistant is running in fallback mode. OpenAI API key not configured. You\\'ll still get helpful responses, but they won\\'t be as intelligent.',\n            timestamp: new Date()\n          };\n          setMessages(prev => [...prev, systemMessage]);\n        }\n      } catch (error) {\n        console.error('Failed to check assistant status:', error);\n      }\n    };\n    checkStatus();\n  }, []);\n\n  const getHints = async () => {\n    if (!problemId) {\n      alert('No problem selected for hints');\n      return;\n    }\n    \n    setIsLoading(true);\n    try {\n      const hintsResponse = await api.getDynamicHints(problemId);\n      const hintsMessage: Message = {\n        id: Date.now().toString(),\n        type: 'hints',\n        content: `Here are some hints for this problem:\\n\\n${hintsResponse.hints.map((hint, idx) => `${idx + 1}. ${hint}`).join('\\n')}`,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, hintsMessage]);\n    } catch (error) {\n      console.error('Failed to get hints:', error);\n      const errorMessage: Message = {\n        id: Date.now().toString(),\n        type: 'system',\n        content: 'Sorry, I couldn\\'t get hints right now. Please try again later.',\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(scrollToBottom, [messages]);\n\n  const handleSendMessage = async () => {\n    if (!inputValue.trim() || isLoading) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      type: 'user',\n      content: inputValue,\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    const question = inputValue;\n    setInputValue('');\n    setIsLoading(true);\n\n    try {\n      const response = await api.askAssistant({\n        question,\n        context_problem_id: problemId\n      });\n      \n      const assistantMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        type: 'assistant',\n        content: response.answer,\n        timestamp: new Date(),\n        relatedConcepts: response.related_concepts,\n        confidence: response.confidence\n      };\n\n      setMessages(prev => [...prev, assistantMessage]);\n    } catch (error) {\n      console.error('Failed to get assistant response:', error);\n      const errorMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        type: 'system',\n        content: 'Sorry, I encountered an error. Please try again.',\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  return (\n    <div className=\"chat-box\">\n      <div className=\"chat-header\">\n        <h3>🤖 AI Assistant</h3>\n        <div className=\"chat-status\">\n          <span className={isLoading ? 'thinking' : 'ready'}>\n            {isLoading ? 'Thinking...' : assistantStatus?.llm_available ? '🟢 AI Ready' : '🟡 Fallback Mode'}\n          </span>\n        </div>\n      </div>\n\n      <div className=\"chat-actions\">\n        {problemId && (\n          <button \n            className=\"hint-button\"\n            onClick={getHints}\n            disabled={isLoading}\n          >\n            💡 Get Hints\n          </button>\n        )}\n        <div className=\"quick-questions\">\n          <small>Quick questions:</small>\n          <button onClick={() => setInputValue('What is load balancing?')}>Load Balancing</button>\n          <button onClick={() => setInputValue('How does caching work?')}>Caching</button>\n          <button onClick={() => setInputValue('What is database sharding?')}>Sharding</button>\n        </div>\n      </div>\n\n      <div className=\"chat-messages\">\n        {messages.map(message => (\n          <div key={message.id} className={`message ${message.type}`}>\n            <div className=\"message-content\">\n              {message.type === 'hints' ? (\n                <div className=\"hints-content\">\n                  <div className=\"hints-header\">💡 Hints for this problem:</div>\n                  <div className=\"hints-list\">\n                    {message.content.split('\\n').filter(line => line.trim()).map((line, idx) => (\n                      <div key={idx} className=\"hint-item\">{line}</div>\n                    ))}\n                  </div>\n                </div>\n              ) : (\n                <>\n                  {message.content.split('\\n').map((line, idx) => (\n                    <div key={idx}>{line}</div>\n                  ))}\n                </>\n              )}\n            </div>\n            \n            {message.relatedConcepts && message.relatedConcepts.length > 0 && (\n              <div className=\"related-concepts\">\n                <small>Related concepts: {message.relatedConcepts.join(', ')}</small>\n              </div>\n            )}\n            \n            <div className=\"message-footer\">\n              <div className=\"message-timestamp\">\n                {message.timestamp.toLocaleTimeString()}\n              </div>\n              {message.confidence && (\n                <div className={`confidence confidence-${message.confidence}`}>\n                  {message.confidence} confidence\n                </div>\n              )}\n            </div>\n          </div>\n        ))}\n        {isLoading && (\n          <div className=\"message assistant loading\">\n            <div className=\"typing-indicator\">\n              <span></span>\n              <span></span>\n              <span></span>\n            </div>\n          </div>\n        )}\n        <div ref={messagesEndRef} />\n      </div>\n\n      <div className=\"chat-input\">\n        <div className=\"input-container\">\n          <textarea\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyPress={handleKeyPress}\n            placeholder=\"Ask about system design concepts, patterns, or get help with your current problem...\"\n            rows={2}\n            disabled={isLoading}\n          />\n          <button\n            onClick={handleSendMessage}\n            disabled={!inputValue.trim() || isLoading}\n            className=\"send-button\"\n          >\n            {isLoading ? '...' : 'Send'}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatBox;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\Downloads\\\\internships\\\\SysDesignLEETCODE\\\\services\\\\frontend\\\\src\\\\components\\\\ChatBox.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBox = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    id: '1',\n    type: 'assistant',\n    content: 'Hi! I\\'m your System Design Assistant. Describe the system you want to design, and I\\'ll help you break it down into components and guide you through best practices.',\n    timestamp: new Date()\n  }]);\n  const [inputValue, setInputValue] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  useEffect(scrollToBottom, [messages]);\n  const handleSendMessage = async () => {\n    if (!inputValue.trim() || isLoading) return;\n    const userMessage = {\n      id: Date.now().toString(),\n      type: 'user',\n      content: inputValue,\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInputValue('');\n    setIsLoading(true);\n    try {\n      // Simulate AI response (replace with actual API call)\n      const response = await simulateAIResponse(inputValue);\n      const assistantMessage = {\n        id: (Date.now() + 1).toString(),\n        type: 'assistant',\n        content: response,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, assistantMessage]);\n    } catch (error) {\n      const errorMessage = {\n        id: (Date.now() + 1).toString(),\n        type: 'system',\n        content: 'Sorry, I encountered an error. Please try again.',\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Design Assistant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-status\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: isLoading ? 'thinking' : 'ready',\n          children: isLoading ? 'Thinking...' : 'Ready to help'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.type}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: message.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-timestamp\",\n          children: message.timestamp.toLocaleTimeString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this)]\n      }, message.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message assistant loading\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"typing-indicator\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyPress: handleKeyPress,\n          placeholder: \"Describe your system design problem...\",\n          rows: 2,\n          disabled: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          disabled: !inputValue.trim() || isLoading,\n          className: \"send-button\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBox, \"DhA4Xu2RBrXsUjCKmylXtrVr/40=\");\n_c = ChatBox;\nexport default ChatBox;\nvar _c;\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","ChatBox","_s","messages","setMessages","id","type","content","timestamp","Date","inputValue","setInputValue","isLoading","setIsLoading","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","trim","userMessage","now","toString","prev","response","simulateAIResponse","assistantMessage","error","errorMessage","handleKeyPress","e","key","shiftKey","preventDefault","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","message","toLocaleTimeString","ref","value","onChange","target","onKeyPress","placeholder","rows","disabled","onClick","_c","$RefreshReg$"],"sources":["D:/Downloads/internships/SysDesignLEETCODE/services/frontend/src/components/ChatBox.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { api } from '../api';\r\n\r\ninterface Message {\r\n  id: string;\r\n  type: 'user' | 'assistant' | 'system';\r\n  content: string;\r\n  timestamp: Date;\r\n}\r\n\r\nconst ChatBox: React.FC = () => {\r\n  const [messages, setMessages] = useState<Message[]>([\r\n    {\r\n      id: '1',\r\n      type: 'assistant',\r\n      content: 'Hi! I\\'m your System Design Assistant. Describe the system you want to design, and I\\'ll help you break it down into components and guide you through best practices.',\r\n      timestamp: new Date()\r\n    }\r\n  ]);\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  };\r\n\r\n  useEffect(scrollToBottom, [messages]);\r\n\r\n  const handleSendMessage = async () => {\r\n    if (!inputValue.trim() || isLoading) return;\r\n\r\n    const userMessage: Message = {\r\n      id: Date.now().toString(),\r\n      type: 'user',\r\n      content: inputValue,\r\n      timestamp: new Date()\r\n    };\r\n\r\n    setMessages(prev => [...prev, userMessage]);\r\n    setInputValue('');\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      // Simulate AI response (replace with actual API call)\r\n      const response = await simulateAIResponse(inputValue);\r\n      \r\n      const assistantMessage: Message = {\r\n        id: (Date.now() + 1).toString(),\r\n        type: 'assistant',\r\n        content: response,\r\n        timestamp: new Date()\r\n      };\r\n\r\n      setMessages(prev => [...prev, assistantMessage]);\r\n    } catch (error) {\r\n      const errorMessage: Message = {\r\n        id: (Date.now() + 1).toString(),\r\n        type: 'system',\r\n        content: 'Sorry, I encountered an error. Please try again.',\r\n        timestamp: new Date()\r\n      };\r\n      setMessages(prev => [...prev, errorMessage]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      e.preventDefault();\r\n      handleSendMessage();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-box\">\r\n      <div className=\"chat-header\">\r\n        <h3>Design Assistant</h3>\r\n        <div className=\"chat-status\">\r\n          <span className={isLoading ? 'thinking' : 'ready'}>\r\n            {isLoading ? 'Thinking...' : 'Ready to help'}\r\n          </span>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"chat-messages\">\r\n        {messages.map(message => (\r\n          <div key={message.id} className={`message ${message.type}`}>\r\n            <div className=\"message-content\">\r\n              {message.content}\r\n            </div>\r\n            <div className=\"message-timestamp\">\r\n              {message.timestamp.toLocaleTimeString()}\r\n            </div>\r\n          </div>\r\n        ))}\r\n        {isLoading && (\r\n          <div className=\"message assistant loading\">\r\n            <div className=\"typing-indicator\">\r\n              <span></span>\r\n              <span></span>\r\n              <span></span>\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n\r\n      <div className=\"chat-input\">\r\n        <div className=\"input-container\">\r\n          <textarea\r\n            value={inputValue}\r\n            onChange={(e) => setInputValue(e.target.value)}\r\n            onKeyPress={handleKeyPress}\r\n            placeholder=\"Describe your system design problem...\"\r\n            rows={2}\r\n            disabled={isLoading}\r\n          />\r\n          <button\r\n            onClick={handleSendMessage}\r\n            disabled={!inputValue.trim() || isLoading}\r\n            className=\"send-button\"\r\n          >\r\n            Send\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatBox;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
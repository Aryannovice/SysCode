{"ast":null,"code":"const API_BASE = process.env.REACT_APP_API_URL || 'http://localhost:8000/api/v1';\nclass APIClient {\n  async getProblems() {\n    const response = await fetch(`${API_BASE}/problems`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch problems');\n    }\n    return response.json();\n  }\n  async submitDesign(request) {\n    const response = await fetch(`${API_BASE}/design/submit`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(request)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to submit design');\n    }\n    return response.json();\n  }\n  async getFeedbackStream(designId) {\n    const response = await fetch(`${API_BASE}/design/${designId}/stream`);\n    if (!response.ok) {\n      throw new Error('Failed to get feedback stream');\n    }\n    return response.body;\n  }\n  async provideFeedback(designId, feedback) {\n    const response = await fetch(`${API_BASE}/design/${designId}/feedback`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(feedback)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to provide feedback');\n    }\n    return response.json();\n  }\n}\nexport const api = new APIClient();","map":{"version":3,"names":["API_BASE","process","env","REACT_APP_API_URL","APIClient","getProblems","response","fetch","ok","Error","json","submitDesign","request","method","headers","body","JSON","stringify","getFeedbackStream","designId","provideFeedback","feedback","api"],"sources":["D:/Downloads/internships/SysDesignLEETCODE/services/frontend/src/api.ts"],"sourcesContent":["const API_BASE = process.env.REACT_APP_API_URL || 'http://localhost:8000/api/v1';\r\n\r\nexport interface DesignRequest {\r\n  problem_statement: string;\r\n  requirements: string[];\r\n  scale_requirements?: Record<string, string>;\r\n  constraints?: string[];\r\n}\r\n\r\nexport interface DesignResponse {\r\n  design_id: string;\r\n  analysis: string;\r\n  suggestions: string[];\r\n  components: Array<{\r\n    type: string;\r\n    name: string;\r\n    description: string;\r\n    rationale: string;\r\n    alternatives: string[];\r\n  }>;\r\n  estimated_complexity: string;\r\n}\r\n\r\nclass APIClient {\r\n  async getProblems() {\r\n    const response = await fetch(`${API_BASE}/problems`);\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch problems');\r\n    }\r\n    return response.json();\r\n  }\r\n\r\n  async submitDesign(request: DesignRequest): Promise<DesignResponse> {\r\n    const response = await fetch(`${API_BASE}/design/submit`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(request),\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Failed to submit design');\r\n    }\r\n    \r\n    return response.json();\r\n  }\r\n\r\n  async getFeedbackStream(designId: string): Promise<ReadableStream<Uint8Array> | null> {\r\n    const response = await fetch(`${API_BASE}/design/${designId}/stream`);\r\n    if (!response.ok) {\r\n      throw new Error('Failed to get feedback stream');\r\n    }\r\n    return response.body;\r\n  }\r\n\r\n  async provideFeedback(designId: string, feedback: {\r\n    component_type: string;\r\n    component_details: Record<string, any>;\r\n    user_rationale?: string;\r\n  }) {\r\n    const response = await fetch(`${API_BASE}/design/${designId}/feedback`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(feedback),\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Failed to provide feedback');\r\n    }\r\n    \r\n    return response.json();\r\n  }\r\n}\r\n\r\nexport const api = new APIClient();\r\n\r\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,8BAA8B;AAuBhF,MAAMC,SAAS,CAAC;EACd,MAAMC,WAAWA,CAAA,EAAG;IAClB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,QAAQ,WAAW,CAAC;IACpD,IAAI,CAACM,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;IAC7C;IACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB;EAEA,MAAMC,YAAYA,CAACC,OAAsB,EAA2B;IAClE,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,QAAQ,gBAAgB,EAAE;MACxDa,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,OAAO;IAC9B,CAAC,CAAC;IAEF,IAAI,CAACN,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;IAC5C;IAEA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB;EAEA,MAAMQ,iBAAiBA,CAACC,QAAgB,EAA8C;IACpF,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,QAAQ,WAAWmB,QAAQ,SAAS,CAAC;IACrE,IAAI,CAACb,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;IAClD;IACA,OAAOH,QAAQ,CAACS,IAAI;EACtB;EAEA,MAAMK,eAAeA,CAACD,QAAgB,EAAEE,QAIvC,EAAE;IACD,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,QAAQ,WAAWmB,QAAQ,WAAW,EAAE;MACtEN,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACI,QAAQ;IAC/B,CAAC,CAAC;IAEF,IAAI,CAACf,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;IAC/C;IAEA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB;AACF;AAEA,OAAO,MAAMY,GAAG,GAAG,IAAIlB,SAAS,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
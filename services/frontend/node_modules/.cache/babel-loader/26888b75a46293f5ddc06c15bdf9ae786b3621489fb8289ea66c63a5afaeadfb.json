{"ast":null,"code":"const API_BASE = process.env.REACT_APP_API_URL || 'http://localhost:8000/api/v1';\n\n// New interfaces matching your backend\n\nclass APIClient {\n  // Problem Management\n  async getAllProblems() {\n    const response = await fetch(`${API_BASE}/problems`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch problems');\n    }\n    return response.json();\n  }\n  async generateRandomProblem(difficulty) {\n    const response = await fetch(`${API_BASE}/problems/generate?difficulty=${difficulty}`);\n    if (!response.ok) {\n      throw new Error('Failed to generate problem');\n    }\n    return response.json();\n  }\n  async getProblem(problemId) {\n    const response = await fetch(`${API_BASE}/problems/${problemId}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch problem');\n    }\n    return response.json();\n  }\n  async getProblemsByDifficulty(difficulty) {\n    const response = await fetch(`${API_BASE}/problems/difficulty/${difficulty}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch problems by difficulty');\n    }\n    return response.json();\n  }\n\n  // Solution Verification\n  async verifySolution(problemId, userSolution) {\n    const response = await fetch(`${API_BASE}/solutions/verify/${problemId}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userSolution)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to verify solution');\n    }\n    return response.json();\n  }\n  async getExpectedSolution(problemId) {\n    const response = await fetch(`${API_BASE}/solutions/${problemId}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch expected solution');\n    }\n    return response.json();\n  }\n  async compareSolutions(problemId, userSolution) {\n    const response = await fetch(`${API_BASE}/solutions/compare/${problemId}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userSolution)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to compare solutions');\n    }\n    return response.json();\n  }\n\n  // LLM-Enhanced Features\n  async getDynamicHints(problemId, progress) {\n    const url = new URL(`${API_BASE}/problems/${problemId}/hints`);\n    if (progress) {\n      url.searchParams.append('progress', JSON.stringify(progress));\n    }\n    const response = await fetch(url.toString());\n    if (!response.ok) {\n      throw new Error('Failed to get hints');\n    }\n    return response.json();\n  }\n  async askAssistant(request) {\n    const response = await fetch(`${API_BASE}/assistant/ask`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(request)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to ask assistant');\n    }\n    return response.json();\n  }\n  async getAssistantStatus() {\n    const response = await fetch(`${API_BASE}/assistant/status`);\n    if (!response.ok) {\n      throw new Error('Failed to get assistant status');\n    }\n    return response.json();\n  }\n\n  // Legacy methods for compatibility (can be removed later)\n  async getProblems() {\n    const data = await this.getAllProblems();\n    return data.problems;\n  }\n}\nexport const api = new APIClient();","map":{"version":3,"names":["API_BASE","process","env","REACT_APP_API_URL","APIClient","getAllProblems","response","fetch","ok","Error","json","generateRandomProblem","difficulty","getProblem","problemId","getProblemsByDifficulty","verifySolution","userSolution","method","headers","body","JSON","stringify","getExpectedSolution","compareSolutions","getDynamicHints","progress","url","URL","searchParams","append","toString","askAssistant","request","getAssistantStatus","getProblems","data","problems","api"],"sources":["D:/Downloads/internships/SysDesignLEETCODE/services/frontend/src/api.ts"],"sourcesContent":["const API_BASE = process.env.REACT_APP_API_URL || 'http://localhost:8000/api/v1';\r\n\r\n// New interfaces matching your backend\r\nexport interface Problem {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  tags: string[];\r\n  difficulty: string;\r\n  expectations: string[];\r\n}\r\n\r\nexport interface UserSolution {\r\n  architecture_components: string[];\r\n  design_choices: string[];\r\n  explanation?: string;\r\n}\r\n\r\nexport interface VerificationResult {\r\n  problem_id: string;\r\n  overall_score: number;\r\n  max_score: number;\r\n  component_analysis: {\r\n    score: number;\r\n    matched_components: string[];\r\n    missing_components: string[];\r\n    extra_components: string[];\r\n  };\r\n  design_choices_analysis: {\r\n    score: number;\r\n    addressed_expectations: string[];\r\n    missing_expectations: string[];\r\n  };\r\n  recommendations: string[];\r\n  llm_enhancement?: {\r\n    llm_enhanced_score: number;\r\n    llm_feedback: string;\r\n    strengths: string[];\r\n    improvements: string[];\r\n    advanced_concepts: string[];\r\n    industry_relevance: string;\r\n  };\r\n  follow_up_questions?: string[];\r\n}\r\n\r\nexport interface AssistantRequest {\r\n  question: string;\r\n  context_problem_id?: string;\r\n}\r\n\r\nexport interface AssistantResponse {\r\n  question: string;\r\n  answer: string;\r\n  related_concepts: string[];\r\n  confidence: string;\r\n}\r\n\r\nclass APIClient {\r\n  // Problem Management\r\n  async getAllProblems(): Promise<{problems: Problem[], stats: any}> {\r\n    const response = await fetch(`${API_BASE}/problems`);\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch problems');\r\n    }\r\n    return response.json();\r\n  }\r\n\r\n  async generateRandomProblem(difficulty: 'beginner' | 'intermediate'): Promise<Problem> {\r\n    const response = await fetch(`${API_BASE}/problems/generate?difficulty=${difficulty}`);\r\n    if (!response.ok) {\r\n      throw new Error('Failed to generate problem');\r\n    }\r\n    return response.json();\r\n  }\r\n\r\n  async getProblem(problemId: string): Promise<Problem> {\r\n    const response = await fetch(`${API_BASE}/problems/${problemId}`);\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch problem');\r\n    }\r\n    return response.json();\r\n  }\r\n\r\n  async getProblemsByDifficulty(difficulty: string): Promise<{difficulty: string, count: number, problems: Problem[]}> {\r\n    const response = await fetch(`${API_BASE}/problems/difficulty/${difficulty}`);\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch problems by difficulty');\r\n    }\r\n    return response.json();\r\n  }\r\n\r\n  // Solution Verification\r\n  async verifySolution(problemId: string, userSolution: UserSolution): Promise<VerificationResult> {\r\n    const response = await fetch(`${API_BASE}/solutions/verify/${problemId}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(userSolution),\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Failed to verify solution');\r\n    }\r\n    \r\n    return response.json();\r\n  }\r\n\r\n  async getExpectedSolution(problemId: string) {\r\n    const response = await fetch(`${API_BASE}/solutions/${problemId}`);\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch expected solution');\r\n    }\r\n    return response.json();\r\n  }\r\n\r\n  async compareSolutions(problemId: string, userSolution: UserSolution) {\r\n    const response = await fetch(`${API_BASE}/solutions/compare/${problemId}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(userSolution),\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Failed to compare solutions');\r\n    }\r\n    \r\n    return response.json();\r\n  }\r\n\r\n  // LLM-Enhanced Features\r\n  async getDynamicHints(problemId: string, progress?: any): Promise<{problem_id: string, hints: string[], total_hints: number}> {\r\n    const url = new URL(`${API_BASE}/problems/${problemId}/hints`);\r\n    if (progress) {\r\n      url.searchParams.append('progress', JSON.stringify(progress));\r\n    }\r\n    \r\n    const response = await fetch(url.toString());\r\n    if (!response.ok) {\r\n      throw new Error('Failed to get hints');\r\n    }\r\n    return response.json();\r\n  }\r\n\r\n  async askAssistant(request: AssistantRequest): Promise<AssistantResponse> {\r\n    const response = await fetch(`${API_BASE}/assistant/ask`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(request),\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Failed to ask assistant');\r\n    }\r\n    \r\n    return response.json();\r\n  }\r\n\r\n  async getAssistantStatus(): Promise<{llm_available: boolean, openai_configured: boolean, features: any}> {\r\n    const response = await fetch(`${API_BASE}/assistant/status`);\r\n    if (!response.ok) {\r\n      throw new Error('Failed to get assistant status');\r\n    }\r\n    return response.json();\r\n  }\r\n\r\n  // Legacy methods for compatibility (can be removed later)\r\n  async getProblems() {\r\n    const data = await this.getAllProblems();\r\n    return data.problems;\r\n  }\r\n}\r\n\r\nexport const api = new APIClient();\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
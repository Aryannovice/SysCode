{"ast":null,"code":"var _jsxFileName = \"D:\\\\Downloads\\\\internships\\\\SysDesignLEETCODE\\\\services\\\\frontend\\\\src\\\\components\\\\ChatBox.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Simulate AI response function\nconst simulateAIResponse = async userInput => {\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));\n\n  // Simple response simulation based on keywords\n  const input = userInput.toLowerCase();\n  if (input.includes('database') || input.includes('storage')) {\n    return \"For data storage, consider using a combination of SQL databases for structured data and NoSQL databases for unstructured data. Think about data consistency, availability, and partition tolerance (CAP theorem).\";\n  } else if (input.includes('cache') || input.includes('redis')) {\n    return \"Caching is crucial for performance. Consider using Redis for in-memory caching, implement cache-aside pattern, and think about cache invalidation strategies.\";\n  } else if (input.includes('load balancer') || input.includes('scaling')) {\n    return \"Load balancing helps distribute traffic. Use application load balancers for HTTP traffic and network load balancers for TCP. Consider horizontal scaling with auto-scaling groups.\";\n  } else if (input.includes('microservices') || input.includes('architecture')) {\n    return \"Microservices architecture promotes loose coupling. Consider API gateways, service discovery, and distributed tracing. Don't forget about data consistency between services.\";\n  } else {\n    return \"That's an interesting system design question! Can you provide more details about the specific requirements, scale, and constraints? This will help me give you more targeted advice.\";\n  }\n};\nconst ChatBox = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    id: '1',\n    type: 'assistant',\n    content: 'Hi! I\\'m your System Design Assistant. Describe the system you want to design, and I\\'ll help you break it down into components and guide you through best practices.',\n    timestamp: new Date()\n  }]);\n  const [inputValue, setInputValue] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  useEffect(scrollToBottom, [messages]);\n  const handleSendMessage = async () => {\n    if (!inputValue.trim() || isLoading) return;\n    const userMessage = {\n      id: Date.now().toString(),\n      type: 'user',\n      content: inputValue,\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInputValue('');\n    setIsLoading(true);\n    try {\n      // Simulate AI response (replace with actual API call)\n      const response = await simulateAIResponse(inputValue);\n      const assistantMessage = {\n        id: (Date.now() + 1).toString(),\n        type: 'assistant',\n        content: response,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, assistantMessage]);\n    } catch (error) {\n      const errorMessage = {\n        id: (Date.now() + 1).toString(),\n        type: 'system',\n        content: 'Sorry, I encountered an error. Please try again.',\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Design Assistant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-status\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: isLoading ? 'thinking' : 'ready',\n          children: isLoading ? 'Thinking...' : 'Ready to help'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.type}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: message.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-timestamp\",\n          children: message.timestamp.toLocaleTimeString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this)]\n      }, message.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message assistant loading\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"typing-indicator\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyPress: handleKeyPress,\n          placeholder: \"Describe your system design problem...\",\n          rows: 2,\n          disabled: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          disabled: !inputValue.trim() || isLoading,\n          className: \"send-button\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBox, \"1aVNEu69m0eWQOBUsV9XW0fmue0=\");\n_c = ChatBox;\nexport default ChatBox;\nvar _c;\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","simulateAIResponse","userInput","Promise","resolve","setTimeout","Math","random","input","toLowerCase","includes","ChatBox","_s","messages","setMessages","id","type","content","timestamp","Date","inputValue","setInputValue","isLoading","setIsLoading","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","trim","userMessage","now","toString","prev","response","assistantMessage","error","errorMessage","handleKeyPress","e","key","shiftKey","preventDefault","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","message","toLocaleTimeString","ref","value","onChange","target","onKeyPress","placeholder","rows","disabled","onClick","_c","$RefreshReg$"],"sources":["D:/Downloads/internships/SysDesignLEETCODE/services/frontend/src/components/ChatBox.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { api } from '../api';\n\ninterface Message {\n  id: string;\n  type: 'user' | 'assistant' | 'system';\n  content: string;\n  timestamp: Date;\n}\n\n// Simulate AI response function\nconst simulateAIResponse = async (userInput: string): Promise<string> => {\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));\n  \n  // Simple response simulation based on keywords\n  const input = userInput.toLowerCase();\n  \n  if (input.includes('database') || input.includes('storage')) {\n    return \"For data storage, consider using a combination of SQL databases for structured data and NoSQL databases for unstructured data. Think about data consistency, availability, and partition tolerance (CAP theorem).\";\n  } else if (input.includes('cache') || input.includes('redis')) {\n    return \"Caching is crucial for performance. Consider using Redis for in-memory caching, implement cache-aside pattern, and think about cache invalidation strategies.\";\n  } else if (input.includes('load balancer') || input.includes('scaling')) {\n    return \"Load balancing helps distribute traffic. Use application load balancers for HTTP traffic and network load balancers for TCP. Consider horizontal scaling with auto-scaling groups.\";\n  } else if (input.includes('microservices') || input.includes('architecture')) {\n    return \"Microservices architecture promotes loose coupling. Consider API gateways, service discovery, and distributed tracing. Don't forget about data consistency between services.\";\n  } else {\n    return \"That's an interesting system design question! Can you provide more details about the specific requirements, scale, and constraints? This will help me give you more targeted advice.\";\n  }\n};\n\nconst ChatBox: React.FC = () => {\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: '1',\n      type: 'assistant',\n      content: 'Hi! I\\'m your System Design Assistant. Describe the system you want to design, and I\\'ll help you break it down into components and guide you through best practices.',\n      timestamp: new Date()\n    }\n  ]);\n  const [inputValue, setInputValue] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(scrollToBottom, [messages]);\n\n  const handleSendMessage = async () => {\n    if (!inputValue.trim() || isLoading) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      type: 'user',\n      content: inputValue,\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInputValue('');\n    setIsLoading(true);\n\n    try {\n      // Simulate AI response (replace with actual API call)\n      const response = await simulateAIResponse(inputValue);\n      \n      const assistantMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        type: 'assistant',\n        content: response,\n        timestamp: new Date()\n      };\n\n      setMessages(prev => [...prev, assistantMessage]);\n    } catch (error) {\n      const errorMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        type: 'system',\n        content: 'Sorry, I encountered an error. Please try again.',\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  return (\n    <div className=\"chat-box\">\n      <div className=\"chat-header\">\n        <h3>Design Assistant</h3>\n        <div className=\"chat-status\">\n          <span className={isLoading ? 'thinking' : 'ready'}>\n            {isLoading ? 'Thinking...' : 'Ready to help'}\n          </span>\n        </div>\n      </div>\n\n      <div className=\"chat-messages\">\n        {messages.map(message => (\n          <div key={message.id} className={`message ${message.type}`}>\n            <div className=\"message-content\">\n              {message.content}\n            </div>\n            <div className=\"message-timestamp\">\n              {message.timestamp.toLocaleTimeString()}\n            </div>\n          </div>\n        ))}\n        {isLoading && (\n          <div className=\"message assistant loading\">\n            <div className=\"typing-indicator\">\n              <span></span>\n              <span></span>\n              <span></span>\n            </div>\n          </div>\n        )}\n        <div ref={messagesEndRef} />\n      </div>\n\n      <div className=\"chat-input\">\n        <div className=\"input-container\">\n          <textarea\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyPress={handleKeyPress}\n            placeholder=\"Describe your system design problem...\"\n            rows={2}\n            disabled={isLoading}\n          />\n          <button\n            onClick={handleSendMessage}\n            disabled={!inputValue.trim() || isLoading}\n            className=\"send-button\"\n          >\n            Send\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatBox;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}